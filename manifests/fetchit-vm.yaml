version: "1"
type: "Application"
metadata:
  name: "fetchit-gitops-vm3"
  description: "GitOps VM with FetchIt container management - manages containers from this repo"
  clusterGroups:
    - DDvsns
  testClusterGroup: "dd_szt15b"
  lifecycle: production
  labels:
    - gitops
    - containers
    - fetchit

spec:
  assets:
    - name: fetchit-runtime
      type: virtual_disk
      format: raw
      url: "https://pm-westfield.s3.us-east-2.amazonaws.com/openSUSE-MicroOS.x86_64-ContainerHost-OpenStack-Cloud.raw"
  
  resources:
    - name: fetchit-gitops-vm
      type: virdomain
      spec:
        description: "GitOps VM with FetchIt - manages containers from fleet-manager-gitops repo - name {{clusterName}} id {{clusterId}}"
        cpu: 4
        memory: "4294967296"  # 4GB
        machine_type: bios
        storage_devices:
          - name: rootdisk
            source: fetchit-runtime
            boot: 1
            capacity: 50000000000  # 50GB
          - name: fetchit-storage
            type: virtio_disk
            capacity: 100000000000  # 100GB for container storage
        network_devices:
          - name: eth0
            type: virtio
        cloud_init_data:
          user_data: |
            #cloud-config
            users:
              - name: user
                groups: [wheel]
                sudo: ALL=(ALL) NOPASSWD:ALL
                shell: /bin/bash
                ssh_authorized_keys:
                  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDihWWhjoPj8KVLtdLDwNJQ71zi9An0iUFjefRWu2Eju ddemlow@scalecomputing.com
                  - github:daveddemlow
                lock_passwd: false
                passwd: $6$rounds=4096$salt$hash  # password hash for 'password'
            chpasswd:
              list: "user:password"
              expire: false
            
            
            
            runcmd:
              # Create directories in writable locations
              - mkdir -p /opt/fetchit
              - mkdir -p /var/lib/containers
              - mkdir -p /var/log/fetchit
              - mkdir -p /opt/fetchit/status
              - mkdir -p /etc/fetchit
              
              # Create FetchIt config file (use /etc/fetchit which is writable)
              - echo 'targetConfigs:' > /etc/fetchit/config.yaml
              - echo '- url: https://github.com/ddemlow/fleet-manager-gitops' >> /etc/fetchit/config.yaml
              - echo '  branch: master' >> /etc/fetchit/config.yaml
              - echo '  fileTransfer:' >> /etc/fetchit/config.yaml
              - echo '  - name: fetchit-config' >> /etc/fetchit/config.yaml
              - echo '    targetPath: fetchit/fetchit-config.yaml' >> /etc/fetchit/config.yaml
              - echo '    destinationDirectory: /opt/fetchit' >> /etc/fetchit/config.yaml
              - echo '    schedule: "*/5 * * * *"' >> /etc/fetchit/config.yaml
              - echo '  raw:' >> /etc/fetchit/config.yaml
              - echo '  - name: demo-containers' >> /etc/fetchit/config.yaml
              - echo '    targetPath: fetchit/containers' >> /etc/fetchit/config.yaml
              - echo '    schedule: "*/2 * * * *"' >> /etc/fetchit/config.yaml
              - echo '  systemd:' >> /etc/fetchit/config.yaml
              - echo '  - name: web-services' >> /etc/fetchit/config.yaml
              - echo '    targetPath: fetchit/systemd' >> /etc/fetchit/config.yaml
              - echo '    schedule: "*/3 * * * *"' >> /etc/fetchit/config.yaml
              - echo 'global:' >> /etc/fetchit/config.yaml
              - echo '  logLevel: info' >> /etc/fetchit/config.yaml
              - echo '  maxRetries: 3' >> /etc/fetchit/config.yaml
              - echo '  retryDelay: "30s"' >> /etc/fetchit/config.yaml
              
              # Create FetchIt systemd service in /etc/systemd/system (writable on MicroOS)
              - echo '[Unit]' > /etc/systemd/system/fetchit.service
              - echo 'Description=FetchIt GitOps Container Manager' >> /etc/systemd/system/fetchit.service
              - echo 'After=network.target podman.socket' >> /etc/systemd/system/fetchit.service
              - echo 'Requires=podman.socket' >> /etc/systemd/system/fetchit.service
              - echo '' >> /etc/systemd/system/fetchit.service
              - echo '[Service]' >> /etc/systemd/system/fetchit.service
              - echo 'Type=simple' >> /etc/systemd/system/fetchit.service
              - echo 'ExecStart=/usr/bin/podman run --rm --name fetchit -v /etc/fetchit:/opt/mount:ro -v /run/user/1000/podman/podman.sock:/run/podman/podman.sock -v /var/lib/containers:/var/lib/containers --security-opt label=disable quay.io/fetchit/fetchit:latest' >> /etc/systemd/system/fetchit.service
              - echo 'Restart=always' >> /etc/systemd/system/fetchit.service
              - echo 'RestartSec=10' >> /etc/systemd/system/fetchit.service
              - echo 'User=user' >> /etc/systemd/system/fetchit.service
              - echo 'Group=user' >> /etc/systemd/system/fetchit.service
              - echo '' >> /etc/systemd/system/fetchit.service
              - echo '[Install]' >> /etc/systemd/system/fetchit.service
              - echo 'WantedBy=multi-user.target' >> /etc/systemd/system/fetchit.service
              
              # Set proper ownership for writable locations
              - chown -R user:user /opt/fetchit || true
              - chown -R user:user /var/lib/containers || true
              - chown -R user:user /var/log/fetchit || true
              
              # Enable podman socket for user (run as user) - with error handling
              - sudo -u user systemctl --user enable podman.socket || true
              - sudo -u user systemctl --user start podman.socket || true
              - loginctl enable-linger user || true
              
              # Reload systemd and enable fetchit service (but don't start yet)
              - systemctl daemon-reload || true
              - systemctl enable fetchit.service || true
              
              # Create deployment log
              - echo "FetchIt GitOps VM deployment completed at $(date)" > /opt/fetchit/status/deployment.log || true
              - 'echo "Cluster: {{clusterName}} ({{clusterId}})" >> /opt/fetchit/status/deployment.log' || true
              - 'echo "Repository: https://github.com/ddemlow/fleet-manager-gitops" >> /opt/fetchit/status/deployment.log' || true
          meta_data: |
            dsmode: local
            local-hostname: "gitops-fetchit-{{clusterName}}"
        
        tags:
          - gitops
          - fetchit
          - containers
          - demo
        state: running
