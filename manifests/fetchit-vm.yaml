version: "1"
type: "Application"
metadata:
  name: "fetchit-gitops-quadlets"
  description: "GitOps VM with FetchIt container management - manages containers from this repo"
  clusterGroups:
    - DDvsns
  testClusterGroup: "dd_szt15b"
  lifecycle: production
  labels:
    - gitops
    - containers
    - fetchit

spec:
  assets:
    - name: fetchit-runtime
      type: virtual_disk
      format: raw
      url: "https://pm-westfield.s3.us-east-2.amazonaws.com/openSUSE-MicroOS.x86_64-ContainerHost-OpenStack-Cloud.raw"
  
  resources:
    - name: fetchit-gitops
      type: virdomain
      spec:
        description: "GitOps VM with FetchIt"
        cpu: 4
        memory: "4294967296"  # 4GB
        machine_type: bios
        storage_devices:
          - name: rootdisk
            source: fetchit-runtime
            boot: 1
            capacity: 50000000000  # 50GB
          - name: fetchit-storage
            type: virtio_disk
            capacity: 100000000000  # 100GB for container storage
        network_devices:
          - name: eth0
            type: virtio
        cloud_init_data:  # note microos does not support write_files: as an immutable os
          user_data: |
            #cloud-config
            users:
              - name: user
                plain_text_passwd: "password"
                lock_passwd: false
                groups: ["wheel"]
                sudo: ["ALL=(ALL) NOPASSWD:ALL"]
                ssh_authorized_keys:
                  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDihWWhjoPj8KVLtdLDwNJQ71zi9An0iUFjefRWu2Eju ddemlow@scalecomputing.com
            ssh_pwauth: true
            disable_root: false
            ssh_import_id: ["gh:ddemlow"]
            runcmd:
              - systemctl enable podman.socket
              - systemctl enable --now podman-auto-update.timer
              - mkdir -p /etc/containers/systemd
              
              # Create directories for FetchIt
              - mkdir -p /var/lib/containers
              - mkdir -p /opt/fetchit
              - mkdir -p /var/log/fetchit
              - mkdir -p /var/www
              - echo "<h1>FetchIt GitOps Demo</h1><p>This is served by the demo container managed by FetchIt!</p>" > /var/www/index.html
              - mkdir -p /var/www/nginx
              - echo "<h1>Nginx Demo</h1><p>This is served by the nginx-demo container!</p>" > /var/www/nginx/index.html
              - mkdir -p /var/www/demo
              - echo "<h1>Demo Web App</h1><p>This is served by the demo container!</p>" > /var/www/demo/index.html
              
              # Create FetchIt bootstrap config - authoritative config loaded via configReload
              - |
                cat <<'EOF' > /opt/fetchit/config.yaml
                configReload:
                  schedule: "*/5 * * * *"
                  configUrl: https://raw.githubusercontent.com/ddemlow/fleet-manager-gitops/master/fetchit/fetchit-config.yaml
                targetConfigs:
                - url: https://github.com/ddemlow/fleet-manager-gitops
                  branch: master
                  kube:
                  - name: demo-services
                    targetPath: fetchit/kube
                    schedule: "*/2 * * * *"
                global:
                  logLevel: info
                  maxRetries: 3
                  retryDelay: "30s"
                EOF
              
              # Create FetchIt systemd service file
              - |
                cat <<'EOF' > /etc/systemd/system/fetchit.service
                [Unit]
                Description=FetchIt GitOps Container Manager
                After=network.target podman.socket
                Requires=podman.socket

                [Service]
                Type=simple
                ExecStart=/usr/bin/podman run --rm --name fetchit -v /opt/fetchit:/opt/mount:rw -v /var/lib/containers:/var/lib/containers:rw -v /run/podman/podman.sock:/run/podman/podman.sock:ro -v /etc/systemd/system:/etc/systemd/system:rw -e SYSTEMD_USER=false --security-opt label=disable quay.io/fetchit/fetchit:latest
                Restart=always
                RestartSec=10
                User=root
                Group=root

                [Install]
                WantedBy=multi-user.target
                EOF
              
              # Ensure user is in the right groups for container access
              - usermod -a -G wheel,root user || true
              
              # Start podman socket for system-wide access
              - systemctl start podman.socket
              
              # Reload systemd and trigger quadlet generation
              - systemctl daemon-reload
              - sleep 5
              
              # Try to enable the service (this should trigger quadlet generation)
              - systemctl enable fetchit.service || true
              
              # If that doesn't work, try to start it directly
              - systemctl start fetchit.service || true
              
              
              # install qemu-guest-agent transactionally; MicroOS will handle this via reboot/override below
              - transactional-update --non-interactive pkg install qemu-guest-agent
              
              - |
                cat <<'EOF' > /etc/systemd/system/enable-qemu-guest-agent.service
                [Unit]
                Description=Enable qemu-guest-agent post-reboot
                After=multi-user.target
                
                [Service]
                Type=oneshot
                ExecStart=/usr/bin/systemctl enable --now qemu-guest-agent.service
                RemainAfterExit=yes
                
                [Install]
                WantedBy=multi-user.target
                EOF
              - mkdir -p /etc/systemd/system/qemu-guest-agent.service.d
              - |
                cat <<'EOF' > /etc/systemd/system/qemu-guest-agent.service.d/override.conf
                [Unit]
                Requires=
                After=
                EOF
              - systemctl enable enable-qemu-guest-agent.service
              - reboot
          meta_data: |
            dsmode: local
            local-hostname: "gitops-fetchit-vm"
        
        tags:
          - gitops
          - fetchit
          - containers
          - demo
        state: running
